# -*- coding: utf-8 -*-
"""github code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_J2_7mktsYzfpsoWKkvWhUgVTfEwjsHs
"""

import json

# =============================
# CLASS 1: Task
# =============================
class Task:
    def __init__(self, title, assigned_to, deadline, status="Pending"):
        self.title = title
        self.assigned_to = assigned_to
        self.deadline = deadline
        self.status = status

    def display(self):
        print(f"Title      : {self.title}")
        print(f"Assigned To: {self.assigned_to}")
        print(f"Deadline   : {self.deadline}")
        print(f"Status     : {self.status}")
        print("-" * 30)


# =============================
# CLASS 2: User (Parent)
# =============================
class User:
    def __init__(self, name, role):
        self.name = name
        self.role = role

    def display_user(self):
        print(f"User: {self.name} | Role: {self.role}")


# =============================
# CLASS 3: Admin
# =============================
class Admin(User):
    def __init__(self, name):
        User.__init__(self, name, "Admin")  # direct call to avoid MRO issues

    def add_task(self, tasks_list, title, assigned_to, deadline):
        new_task = Task(title, assigned_to, deadline)
        tasks_list.append(new_task)
        print(f"\n✅ Task '{title}' added successfully!\n")

    def update_task_status(self, tasks_list, title, new_status):
        for task in tasks_list:
            if task.title == title:
                task.status = new_status
                print(f"\n✅ Task '{title}' status updated to '{new_status}'!\n")
                return
        print("\n⚠️ Task not found!\n")


# =============================
# CLASS 4: TeamMember
# =============================
class TeamMember(User):
    def __init__(self, name):
        User.__init__(self, name, "Team Member")  # direct call to parent

    def view_tasks(self, tasks_list):
        print(f"\n📋 Tasks assigned to {self.name}:\n")
        found = False
        for task in tasks_list:
            if task.assigned_to == self.name:
                task.display()
                found = True
        if not found:
            print("No tasks assigned.\n")

    def mark_done(self, tasks_list, title):
        for task in tasks_list:
            if task.title == title and task.assigned_to == self.name:
                task.status = "Completed"
                print(f"\n✅ Task '{title}' marked as done!\n")
                return
        print("\n⚠️ Task not found or not assigned to you.\n")


# =============================
# CLASS 5: TaskManager (Multiple Inheritance)
# =============================
class TaskManager(Admin, TeamMember):
    def __init__(self, name):
        Admin.__init__(self, name)
        TeamMember.__init__(self, name)

    def save_tasks(self, tasks_list):
        with open("tasks.json", "w") as f:
            json.dump([task.__dict__ for task in tasks_list], f, indent=4)
        print("\n💾 Tasks saved successfully!\n")

    def load_tasks(self):
        try:
            with open("tasks.json", "r") as f:
                data = json.load(f)
                print("\n📂 Tasks loaded successfully!\n")
                return [Task(**task_data) for task_data in data]
        except FileNotFoundError:
            print("\n⚠️ No previous tasks found. Starting fresh.\n")
            return []


# =============================
# MAIN MENU FUNCTION
# =============================
def main():
    manager = TaskManager("AdminUser")
    tasks = manager.load_tasks()

    while True:
        print("\n==== TEAM TASK MANAGER ====")
        print("1. Add Task (Admin)")
        print("2. View My Tasks (Team Member)")
        print("3. Update Task Status (Admin)")
        print("4. Mark Task Done (Team Member)")
        print("5. Save & Exit")

        choice = input("\nEnter choice (1-5): ")

        if choice == "1":
            title = input("Enter task title: ")
            assigned_to = input("Assign to: ")
            deadline = input("Enter deadline (e.g. 2025-11-10): ")
            manager.add_task(tasks, title, assigned_to, deadline)

        elif choice == "2":
            member_name = input("Enter your name: ")
            member = TeamMember(member_name)
            member.view_tasks(tasks)

        elif choice == "3":
            title = input("Enter task title to update: ")
            new_status = input("Enter new status (Pending/Completed): ")
            manager.update_task_status(tasks, title, new_status)

        elif choice == "4":
            member_name = input("Enter your name: ")
            member = TeamMember(member_name)
            title = input("Enter task title to mark done: ")
            member.mark_done(tasks, title)

        elif choice == "5":
            manager.save_tasks(tasks)
            print("👋 Exiting... Goodbye!\n")
            break

        else:
            print("\n⚠️ Invalid choice! Please try again.\n")


# =============================
# RUN PROGRAM
# =============================
if __name__ == "__main__":
    main()